[{"/Users/4lexc/BeepBoop/project2020/frontend/src/index.js":"1","/Users/4lexc/BeepBoop/project2020/frontend/src/App.js":"2","/Users/4lexc/BeepBoop/project2020/frontend/src/reportWebVitals.js":"3","/Users/4lexc/BeepBoop/project2020/frontend/src/pages/HomePage.js":"4","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/index.js":"5","/Users/4lexc/BeepBoop/project2020/frontend/src/pages/LoginPage.js":"6","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Layout/ProtectedRoute.js":"7","/Users/4lexc/BeepBoop/project2020/frontend/src/pages/RegisterPage.js":"8","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/util.js":"9","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/plan.js":"10","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/addPlan.js":"11","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/AddPlan.js":"12","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/Plan.js":"13","/Users/4lexc/BeepBoop/project2020/frontend/src/components/TextEdit/index.js":"14","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/ScrollHandler.js":"15","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/Datenode.js":"16","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/DayHeaders.js":"17","/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/CalendarContainer.js":"18","/Users/4lexc/BeepBoop/project2020/frontend/src/components/SideNotes/index.js":"19"},{"size":500,"mtime":1612056900745,"results":"20","hashOfConfig":"21"},{"size":1400,"mtime":1620044475891,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1607160779910,"results":"23","hashOfConfig":"21"},{"size":2118,"mtime":1620536970675,"results":"24","hashOfConfig":"21"},{"size":7493,"mtime":1620574063876,"results":"25","hashOfConfig":"21"},{"size":2877,"mtime":1619954948282,"results":"26","hashOfConfig":"21"},{"size":618,"mtime":1620008072770,"results":"27","hashOfConfig":"21"},{"size":1462,"mtime":1613537166675,"results":"28","hashOfConfig":"21"},{"size":2374,"mtime":1620548710676,"results":"29","hashOfConfig":"21"},{"size":4099,"mtime":1611579313247,"results":"30","hashOfConfig":"21"},{"size":1270,"mtime":1611561657217,"results":"31","hashOfConfig":"21"},{"size":870,"mtime":1620564469386,"results":"32","hashOfConfig":"21"},{"size":3299,"mtime":1620545046838,"results":"33","hashOfConfig":"21"},{"size":2528,"mtime":1615275551714,"results":"34","hashOfConfig":"21"},{"size":8839,"mtime":1620573682134,"results":"35","hashOfConfig":"21"},{"size":1519,"mtime":1620564471019,"results":"36","hashOfConfig":"21"},{"size":876,"mtime":1612748500827,"results":"37","hashOfConfig":"21"},{"size":185,"mtime":1613353678313,"results":"38","hashOfConfig":"21"},{"size":294,"mtime":1620007789994,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1xa2wku",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},"/Users/4lexc/BeepBoop/project2020/frontend/src/index.js",[],["83","84"],"/Users/4lexc/BeepBoop/project2020/frontend/src/App.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/reportWebVitals.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/pages/HomePage.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/index.js",["85","86"],"import React, { createContext, useCallback, useReducer, useRef } from \"react\";\nimport axios from 'axios';\nimport {Menu, Item, Separator, useContextMenu} from 'react-contexify';\n\nimport '../../Calendar.css'\n\nimport {getPlanIds, getPlan} from './util';\nimport Plan from './Plan'\nimport ScrollHandler from \"./ScrollHandler\";\nimport Datenode from \"./Datenode\";\nimport DayHeaders from \"./DayHeaders\";\nimport CalendarContainer from \"./CalendarContainer\";\nimport { db } from \"../../pages/HomePage\";\nimport { UidContext } from \"../../App\";\n\nexport const CalendarContext = createContext(null);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    // case 'add': \n    //   // action.date_str: Date that needs a plan to be added\n    //   // action.new_plan: New plan to be added\n    //   // action.new_index: Index of new plan (add to end if undefined)\n    //   // NOTE: No Duplicate ID Rule: Will silently filter new_plan from date if new_plan.plan_id already exists in the date\n    //   function insertAt(array, item, index) {\n    //     const ret = [...array];\n    //     index === undefined ? ret.push(item) : ret.splice(index, 0, item);\n    //     return ret;\n    //   }\n    //   return {\n    //     dates: state.dates.map(date => \n    //       date.date_str === action.date_str ? {\n    //         ...date, \n    //         plans: insertAt(date.plans.filter(e => e.plan_id !== action.new_plan.plan_id), action.new_plan, action.new_index),\n    //       } : date\n    //     )\n    //   }\n    // case 'edit': \n    //   return {\n    //     dates: state.dates.map(date => \n    //       date.date_str === action.date_str ? { ...date, plans: \n    //         date.plans.map(plan => \n    //           plan.plan_id === action.plan_id ? {...plan, content: action.entries} : plan\n    //         )\n    //       } : date\n    //     )\n    //   }\n    case 'delete': \n      // action.date_str: Date that needs plans to be removed\n      // action.plan_id: Plan id to be filtered from the date\n      return {\n        dates: state.dates.map(date => \n          date.date_str === action.date_str ? { ...date, plans: date.plans.filter(plan => plan.plan_id !== action.plan_id)} : date\n        )\n      }\n    case 'load': \n      return action.dir === 'END' ? {\n        dates: [...state.dates, ...action.dates]\n      } : {\n        dates: [...action.dates, ...state.dates]\n      }\n    case 'update':\n      return {\n        dates: state.dates.map(date => \n          action.plans[date.date_str] ? { date_str: date.date_str, plans: action.plans[date.date_str] } : date\n        )\n      }\n    default:\n      console.log(`Unknown action type: ${action.type}`);\n      return state;\n  }\n}\n\nfunction Calendar() {\n  const [{ dates }, dispatch] = useReducer(reducer, {dates: []});\n  const { show } = useContextMenu({\n    id: 'planContextMenu',\n  });\n  const clipboard = useRef(null);\n  const {uid} = React.useContext(UidContext);\n\n  const dispatchWrapper = useCallback(async (action) => {\n    try {\n      switch (action.type) {\n        case 'add': {\n          db.collection(`users/${uid}/plans`).add({\n            date: action.date_str,\n            content: action.entries,\n            prc: '',\n          });\n          break;\n        }\n        case 'edit': {\n          db.doc(`users/${uid}/plans/${action.plan_id}`).update('content', action.entries);\n          break;\n        }\n        case 'delete': {\n          db.doc(`users/${uid}/plans/${action.plan_id}`).delete();\n          break;\n        }\n        case 'duplicate': {\n          const refContent = getPlan(dates, action.ref_id).content;\n          const res = await axios.post('/calendar/plan/copy', {\n            plan_id: parseInt(action.ref_id), \n            date: action.to_date,\n          });\n          const new_plan = {\n            plan_id: parseInt(res.data.plan_id),\n            content: refContent,\n          };\n          dispatch({...action, type: 'add', new_plan, date_str: action.to_date});\n          break;\n        }\n        case 'move': {\n          const {plan_id, to_date, from_date, from_prv_id, from_nxt_id, to_prv_id, to_nxt_id } = action;\n          if (to_prv_id) db.doc(`users/${uid}/plans/${to_prv_id}`).update('prc', plan_id);\n          db.doc(`users/${uid}/plans/${plan_id}`).update('date', to_date, 'prc', to_nxt_id);\n          if (from_prv_id) db.doc(`users/${uid}/plans/${from_prv_id}`).update('prc', from_nxt_id);\n\n          break;\n        }\n        case 'load': {\n          dispatch({...action, dates: action.dateRange});\n          db.collection(`users/${uid}/plans`)\n            .where('date', '>=', action.start)\n            .where('date', '<', action.end)\n            .onSnapshot((snapshot) => {\n              const newPlans = {};\n              snapshot.docChanges().forEach(change => {\n                newPlans[change.doc.data().date] = []\n              })\n              snapshot.forEach(doc => {\n                const d = doc.data();\n                if (newPlans[d.date]) {\n                  const newPlan = {\n                    plan_id: doc.id,\n                    content: d.content,\n                    prc: d.prc,\n                  };\n                  const prc = newPlans[d.date].findIndex(plan => plan.plan_id === d.prc);\n                  if (prc !== -1) newPlans[d.date].splice(prc, 0, newPlan);\n                  else newPlans[d.date].push(newPlan);\n                }\n              });\n              console.log(newPlans)\n              dispatch({ type: 'update', plans: newPlans })\n            });\n          break;\n        }\n        case 'menu': {\n          show(action.event, {\n            props: {\n              plan_id: action.plan_id,\n              date_str: action.date_str,\n              plan_el: action.plan_el,\n            }\n          });\n          break;\n        }\n        case 'menu-c': {\n          clipboard.current = {\n            plan_id: action.plan_id,\n            date_str: action.date_str,\n          }\n          break;\n        }\n        case 'menu-v': {\n          if (!clipboard.current) {\n            console.log('Clipboard Empty');\n            return;\n          }\n          dispatchWrapper({type: 'duplicate', ref_id: clipboard.current.plan_id, to_date: action.date_str})\n          break;\n        }\n        default: {\n          console.log(`Unknown action type: ${action.type}`);\n        }\n      }\n    } catch (error) {\n      console.log(action, error);\n    }\n  }, [uid, dates, show]);\n  // const clipboard = React.useRef();\n\n  return (\n    <CalendarContext.Provider value={{dates: dates, dispatchDates: dispatchWrapper}}>\n      <CalendarContainer>\n        <DayHeaders />\n        <ScrollHandler>\n          {dates.map(date => <Datenode\n            key={date.date_str}\n            date_str={date.date_str}\n          >\n            {date.plans.map(plan => <Plan\n              key={plan.plan_id}\n              plan={{date_str: date.date_str, ...plan}}\n            />)}\n          </Datenode>)}\n        </ScrollHandler>\n      </CalendarContainer>\n      <Menu id='planContextMenu'>\n        <Item onClick={e => dispatchWrapper({type: 'menu-edit', ...e.props})}>Edit</Item>\n        <Item onClick={e => dispatchWrapper({type: 'delete', ...e.props})}>Delete</Item>\n        <Separator/>\n        {/* <Item onClick={handleMenuEvent} data={{role: 'cut'}}>Cut</Item> */}\n        <Item onClick={e => dispatchWrapper({type: 'menu-c', ...e.props})}>Copy</Item>\n        <Item onClick={e => dispatchWrapper({type: 'menu-v', ...e.props})}>Paste</Item>\n      </Menu>\n    </CalendarContext.Provider>\n  );\n}\n\nexport default Calendar;\n","/Users/4lexc/BeepBoop/project2020/frontend/src/pages/LoginPage.js",["87","88","89","90"],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Layout/ProtectedRoute.js",[],["91","92"],"/Users/4lexc/BeepBoop/project2020/frontend/src/pages/RegisterPage.js",[],["93","94"],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/util.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/plan.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/addPlan.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/AddPlan.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/Plan.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/TextEdit/index.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/ScrollHandler.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/Datenode.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/DayHeaders.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/Calendar/CalendarContainer.js",[],"/Users/4lexc/BeepBoop/project2020/frontend/src/components/SideNotes/index.js",["95","96"],"import React from 'react';\nimport axios from 'axios';\nimport TextEdit from '../TextEdit';\n\nimport '../../SideNotes.css'\n\nfunction SideNotes() {\n\n  return (\n    <div className={'sidenode-container'}>\n      {/* <TextEdit></TextEdit> */}\n      SideNotes\n    </div>\n  )\n}\n\nexport default SideNotes;",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":7,"column":9,"nodeType":"103","messageId":"104","endLine":7,"endColumn":19},{"ruleId":"101","severity":1,"message":"105","line":115,"column":36,"nodeType":"103","messageId":"104","endLine":115,"endColumn":45},{"ruleId":"101","severity":1,"message":"106","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"101","severity":1,"message":"107","line":4,"column":3,"nodeType":"103","messageId":"104","endLine":4,"endColumn":9},{"ruleId":"101","severity":1,"message":"108","line":5,"column":3,"nodeType":"103","messageId":"104","endLine":5,"endColumn":12},{"ruleId":"101","severity":1,"message":"109","line":6,"column":3,"nodeType":"103","messageId":"104","endLine":6,"endColumn":7},{"ruleId":"97","replacedBy":"110"},{"ruleId":"99","replacedBy":"111"},{"ruleId":"97","replacedBy":"112"},{"ruleId":"99","replacedBy":"113"},{"ruleId":"101","severity":1,"message":"106","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":13},{"ruleId":"101","severity":1,"message":"114","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":16},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'getPlanIds' is defined but never used.","Identifier","unusedVar","'from_date' is assigned a value but never used.","'axios' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Link' is defined but never used.",["115"],["116"],["115"],["116"],"'TextEdit' is defined but never used.","no-global-assign","no-unsafe-negation"]